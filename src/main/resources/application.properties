spring.application.name=servicio-zuul-server
# 8090, puerto por defecto que se usa para los servidores API Gateway: Zuul, Spring Cloud Gateway, etc.. 
# se puede usar otro puerto, pero idealmente el 8090, es como un est�ndar
server.port=8090

eureka.client.service-url.defaultZone=http://servicio-eureka-server:8761/eureka

# Configuramos el enrutado din�mico de cada microservicio. 
# Cada ruta base debe ir asociado al nombre del servicio.
# nombre de la ruta: productos (..routes.productos.. <--- ese es, podemos darle cualquier nombre)
# Service-id (id del servicio): servicio-productos
# Cada vez que queramos acceder al microservicio productos a través de Zuul, debemos colocar la ruta base(el del path).
# Después de la ruta base, vendrían las rutas propias del microservicio de productos.
# Ruta base: /api/productos/
# **, indica las rutas propias del microservicio productos
# Path de Zuul + Path del ms productos: http://127.0.0.1:8090/api/productos/productos

zuul.routes.productos.service-id=servicio-productos
# definimos el path base del microservicio
zuul.routes.productos.path=/api/productos/**

zuul.routes.items.service-id=servicio-item
zuul.routes.items.path=/api/items/**

zuul.routes.usuarios.service-id=servicio-usuarios
zuul.routes.usuarios.path=/api/usuarios/**

zuul.routes.security.service-id=servicio-oauth
zuul.routes.security.path=/api/security/**
# Excluimos de la cabecera el Cookie y Set-Cookie
zuul.routes.security.sensitive-headers=Cookie,Set-Cookie

# Tener encuenta que hystrix envuelve a ribbon, entonces lo ideal es que hystrix tenga un tiempo superior a ribbon
# Con estas tres cofiguraciones manejamos el Timeout con Zuul Server
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
ribbon.ConnectTimeout: 9000
ribbon.ReadTimeout: 30000

spring.sleuth.sampler.probability=1.0

spring.zipkin.base-url=http://127.0.0.1:9411/
spring.zipkin.sender.type=rabbit